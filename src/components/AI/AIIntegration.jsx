import React, { useState } from 'react';
import { Client } from "@gradio/client";
const AIIntegration = () => {
  const [prompt, setPrompt] = useState("Hello!");
  const [imageUrl, setImageUrl] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const steps = 25;
  const width = 512;
  const height = 512;
  const seed = 0;
  const randomizeSeed = false;

  const handleGenerate = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      const client = await Client.connect("black-forest-labs/FLUX.1-schnell");
      const response = await client.predict("/infer", {
        prompt,
        seed,
        randomize_seed: randomizeSeed,
        width,
        height,
        num_inference_steps: steps,
      });

      if (Array.isArray(response.data) && response.data.length > 0) {
        const imageData = response.data[0];
        if (imageData && imageData.url) {
          setImageUrl(imageData.url);
        } else {
          throw new Error("Invalid response format: image URL not found");
        }
      } else {
        throw new Error("Invalid response format");
      }
    } catch (err) {
      console.error("Error generating image:", err);
      setError(err.message || "An error occurred while generating the image");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-[#F4E4BA] min-h-screen p-6">
      <div className="max-w-3xl mx-auto bg-[#1E1006] text-[#FED141] rounded-lg shadow-xl p-6">
        <h2 className="text-2xl font-bold mb-4 text-center">Image Generator</h2>

        <form onSubmit={handleGenerate} className="space-y-4">
          <div>
            <label htmlFor="prompt" className="block mb-2 text-[#B86F25] font-semibold">Prompt:</label>
            <textarea
              id="prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              rows={3}
              className="w-full p-2 rounded bg-[#F4E4BA] text-[#1E1006] border border-[#B86F25]"
            />
          </div>

         

          <button
            type="submit"
            disabled={isLoading}
            className={`w-full py-2 rounded font-bold transition ${
              isLoading
                ? "bg-[#B86F25] cursor-wait"
                : "bg-[#FED141] text-[#1E1006] hover:bg-[#e3b719] cursor-pointer"
            }`}
          >
            {isLoading ? "Generating..." : "Generate Image"}
          </button>
        </form>

        {error && (
          <div className="mt-6 p-4 bg-red-100 text-red-800 rounded">
            <h3 className="font-bold">Error:</h3>
            <p>{error}</p>
          </div>
        )}

        {imageUrl && (
          <div className="mt-6">
            <h3 className="text-xl font-bold mb-2 text-[#FED141]">Generated Image:</h3>
            <img
              src={imageUrl}
              alt="Generated by FLUX.1-schnell"
              className="w-full border border-[#FED141] rounded"
            />
            <div className="mt-2">
              <a href={imageUrl} target="_blank" rel="noopener noreferrer" className="text-[#FED141] underline">
                Open image in new tab
              </a>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AIIntegration;
